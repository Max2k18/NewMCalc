import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'io.fabric'
//apply plugin: 'io.github.rockerhieu:versionberg'

android {
    signingConfigs {
        def keystorePropertiesFile = rootProject.file("keystore.properties")
        Properties keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        forFirebaseTestLab {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    compileSdkVersion 29
    String apptype = "mid"

    def versionPropsFile = file('version.properties')
    String time_zone = "UTC" //you can modify this
    if(versionPropsFile.canRead()){
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE']=code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.maxsavteam.newmcalc"
            minSdkVersion 22
            targetSdkVersion 29
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            versionCode code
            versionName "1.11.5"
            buildConfigField "Boolean", "WhatNewIsExisting", "true"
            buildConfigField "Boolean", "UCModuleActivated", "false"
            buildConfigField "String", "COMPILE_DATE", "\"${getBuildDate("yyMMdd")}\"" // It consist of year, months, day
            buildConfigField "String", "COMPILE_TIME", "\"${getBuildTime(time_zone) + " " + time_zone}\""
            buildConfigField "String", "CoreVersion", "\"v2.2.101921\""
            buildConfigField "Integer", "HistoryStorageProtocolVersion", "2"
            buildConfigField "String", "UpdateDowVersion", "\"v0.4.01.91909_deactivated\""
            buildConfigField "String", "UpdateCheckerVersion", "\"v0.7.1.91912_deactivated\""
        }
    }else
        throw new Exception("Unable to read version.properties")

    buildTypes {
        release {
            buildConfigField("Boolean", "ISDEBUG", "false")
            apptype = "stable"
            buildConfigField "String", "APPTYPE", "\"${apptype}\""
            minifyEnabled true
            shrinkResources true
            aaptOptions {
                cruncherEnabled = false
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField("Boolean", "ISDEBUG", "true")
            apptype = "dev"
            buildConfigField "String", "APPTYPE", "\"${apptype}\""
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".beta"
        }
        forFirebaseTestLab{
            minifyEnabled true
            shrinkResources true
            apptype = "dev"
            buildConfigField "String", "APPTYPE", "\"${apptype}\""
            aaptOptions {
                cruncherEnabled = false
            }
            versionNameSuffix "-FIREBASETESTLAB"
        }
    }
    buildToolsVersion '29.0.2'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    productFlavors {
    }
    android.defaultConfig.javaCompileOptions.annotationProcessorOptions.includeCompileClasspath = true
}
def static getBuildDate(String format){
    return new Date().format(format)
}

static String getBuildTime(String tzone){
    def df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss")
    df.setTimeZone(TimeZone.getTimeZone(tzone))
    return df.format(new Date())
}

dependencies {
    implementation 'uk.co.samuelwall:material-tap-target-prompt:3.0.0'
    implementation 'com.google.firebase:firebase-core:17.2.1'
    implementation 'com.google.firebase:firebase-perf:19.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.core:core:1.1.0'
    implementation 'com.google.firebase:firebase-crash:16.2.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation 'com.google.firebase:firebase-database:19.2.0'
    implementation 'com.google.firebase:firebase-inappmessaging-display:19.0.1'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'org.jetbrains:annotations:15.0'
}