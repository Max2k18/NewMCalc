package com.maxsavteam.newmcalc;import android.app.AlertDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.ActivityInfo;import android.graphics.drawable.ColorDrawable;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.CheckBox;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import java.math.BigInteger;import java.util.ArrayList;import java.util.concurrent.ThreadLocalRandom;public class numgen extends AppCompatActivity {    int len = 0;    ArrayList<String> s = new ArrayList<>();    Drawable dr;    Updater up;    View.OnLongClickListener longclick = new View.OnLongClickListener(){        @Override        public boolean onLongClick(View v){            EditText min = findViewById(R.id.edTextMin);            EditText max = findViewById(R.id.edTextMax);            min.setText("");            max.setText("");            return true;        }    };    protected void log(String txt){        up = new Updater();        up.logger("numgen\n" + txt);    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_numgen);        try{            getSupportActionBar().setDisplayHomeAsUpEnabled(true);            getSupportActionBar().setBackgroundDrawable(new ColorDrawable(getResources().getColor(R.color.black)));            getSupportActionBar().setTitle(R.string.randomgen);            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        }catch(Exception e){            Toast.makeText(getApplicationContext(), e.toString(), Toast.LENGTH_LONG).show();            finish();        }        log("created");        update_service ups = new update_service(this);        BroadcastReceiver br = new BroadcastReceiver() {            @Override            public void onReceive(Context context, Intent intent) {                AlertDialog.Builder b = new AlertDialog.Builder(numgen.this);                b.setCancelable(false)                        .setTitle(R.string.installation)                        .setMessage(R.string.update_avail_to_install)                        .setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                dialog.cancel();                            }                        }).setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                        ups.install();                    }                });                AlertDialog inst = b.create();                inst.show();            }        };        BroadcastReceiver brfail = new BroadcastReceiver() {            @Override            public void onReceive(Context context, Intent intent) {                AlertDialog.Builder b = new AlertDialog.Builder(numgen.this);                b.setTitle(R.string.installation).setMessage(R.string.cannot_update).setNegativeButton("OK", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.cancel();                        log("up failed clicked");                    }                });            }        };        registerReceiver(br, new IntentFilter("android.intent.action.NEWMCALC_UPDATE_SUC"));        registerReceiver(brfail, new IntentFilter("android.intent.action.NEWMCALC_UPDATE_FAIL"));        Intent intent = getIntent();        log("type - " + intent.getStringExtra("type"));        if(intent.getStringExtra("type").equals("pass")){            setContentView(R.layout.numgen_passgen);            try{                getSupportActionBar().setTitle(R.string.passgen);            }catch(Exception e){                Toast.makeText(getApplicationContext(), e.toString(), Toast.LENGTH_LONG).show();                finish();            }            for(int i = 97; i <= 122; i++){                s.add(Character.toString((char) i));                s.add(Character.toString((char) i).toUpperCase());            }            for (int i = 0; i < 10; i++){                s.add(Integer.toString(i));            }            setbackground();            Button b = findViewById(R.id.btnPass6);            dr = b.getBackground();            TextView t = findViewById(R.id.add_chars);            t.setText("<>_.&%-?$^!=[]{}()");            /*Button b = findViewById(R.id.btnGen);            b.setOnLongClickListener(longclick);*/        }        //b.setOnLongClickListener(longclick);*/    }    protected void setbackground(){        ArrayList<Button> b = new ArrayList<>();        b.add(findViewById(R.id.btnPass6));        b.add(findViewById(R.id.btnPass8));        b.add(findViewById(R.id.btnPass12));        b.add(findViewById(R.id.btnPass16));        for(int i = 0; i < b.size(); i++){            b.get(i).setBackground(dr);            b.get(i).setTextColor(getResources().getColor(R.color.black));        }        log("setbackground called");    }    public void checkbox(View v){        CheckBox ch = findViewById(R.id.checkBox);        TextView tx = findViewById(R.id.add_chars);        String x = "<>_.&%-?$^!=[]{}()";        if(ch.isChecked()){            tx.setVisibility(View.VISIBLE);            for(int i = 0; i < x.length(); i++){                s.add(Character.toString(x.charAt(i)));            }        }        else{            tx.setVisibility(View.INVISIBLE);            int sz = s.size();            for(int i = 0; i < x.length(); i++){                s.remove(s.size() - 1);            }        }        log("checkbox changed on " + ch.isChecked());    }    public void btnonclick(View v){        Button btn = findViewById(v.getId());        setbackground();        btn.setTextColor(getResources().getColor(R.color.white));        btn.setBackgroundColor(getResources().getColor(R.color.black));        len = Integer.valueOf(btn.getText().toString());        log("btnonclick called; len - " + len);    }    public void genpass(View v){        if(len != 0){            String pass = "";            for(int i = 0, a; i < len; i++){                a = ThreadLocalRandom.current().nextInt(0, s.size());                pass += s.get(a);            }            findViewById(R.id.btnCopyPass).setVisibility(View.VISIBLE);            TextView t = findViewById(R.id.txtGenedPass);            t.setText(pass);        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        //Toast.makeText(getApplicationContext(), Integer.toString(id) + " " + Integer.toString(R.id.home), Toast.LENGTH_SHORT).show();        if(id == android.R.id.home){            finish();            overridePendingTransition(R.anim.abc_popup_enter,R.anim.alpha);        }        return super.onOptionsItemSelected(item);    }    public void generate(View v){        EditText minInput = findViewById(R.id.edTextMin);        EditText maxInput = findViewById(R.id.edTextMax);        String maxs = maxInput.getText().toString();        String mins = minInput.getText().toString();        log("generate called");        if(!minInput.getText().toString().equals("") && !maxInput.getText().toString().equals("")){            /*if(Integer.valueOf(minInput.getText().toString()) < Integer.MIN_VALUE){                Toast.makeText(getApplicationContext(), getResources().getString(R.string.minintexception), Toast.LENGTH_LONG).show();                return;            }            if(maxInput.getText().toString().compareTo(Integer.toString(Integer.MAX_VALUE)) > 0){                Toast.makeText(getApplicationContext(), getResources().getString(R.string.maxintexception), Toast.LENGTH_LONG).show();                return;            }*/            //Toast.makeText(getApplicationContext(), maxInput.getText().toString() + " " + minInput.getText().toString()            //+ " " + Integer.toString(Integer.MIN_VALUE) + " " + Integer.toString(Integer.MAX_VALUE), Toast.LENGTH_SHORT).show();            /*if(maxInput.getText().toString().compareTo(Integer.toString(Integer.MAX_VALUE)) > 0                    || maxInput.getText().toString().compareTo(Integer.toString(Integer.MIN_VALUE)) < 0                    || minInput.getText().toString().compareTo(Integer.toString(Integer.MAX_VALUE)) > 0                    || minInput.getText().toString().compareTo(Integer.toString(Integer.MIN_VALUE)) < 0){                Toast.makeText(getApplicationContext(), getResources().getString(R.string.maxintexception), Toast.LENGTH_LONG).show();                return;            }*/            BigInteger b1 = new BigInteger(mins);            BigInteger b2 = new BigInteger(maxs), lmax = BigInteger.valueOf(Long.MAX_VALUE), lmin = BigInteger.valueOf(Long.MIN_VALUE);            if(b1.compareTo(lmin) < 0 || b1.compareTo(lmax) > 0 || b2.compareTo(lmin) < 0 || b2.compareTo(lmax) > 0){                Toast.makeText(getApplicationContext(), getResources().getString(R.string.maxintexception), Toast.LENGTH_LONG).show();                return;            }            Long minNum = Long.valueOf(minInput.getText().toString());            Long maxNum = Long.valueOf(maxInput.getText().toString());            log("generate; minNum - " + minNum + ";maxNum - " + maxNum);            if(minNum > maxNum){                Long temp = minNum;                minNum = maxNum;                maxNum = temp;            }            /*Random rand = new Random();            int result = maxNum - minNum;            if(result < 0){                result *= -1;            }            int randNum = rand.nextInt(result) + minNum;*/            long randomNum = ThreadLocalRandom.current().nextLong(minNum, maxNum + 1);            TextView t = findViewById(R.id.txtAnswer);            t.setText(Long.toString(randomNum));            log("generate: randomNum - " + Long.toString(randomNum));            findViewById(R.id.layoutLinear).setVisibility(LinearLayout.VISIBLE);        }    }    public void copy(View v){        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);        TextView t;        if(v.getId() == R.id.btnCopyPass){            t = findViewById(R.id.txtGenedPass);        }else            t = findViewById(R.id.txtAnswer);        clipboard.setText(t.getText().toString());        Toast.makeText(getApplicationContext(), getResources().getString(R.string.copied), Toast.LENGTH_SHORT).show();        log("copied to clipboard; " + t.getText().toString());    }    @Override    public void onBackPressed(){        //super.onBackPressed();        log("back pressed");        finish();        overridePendingTransition(R.anim.abc_popup_enter, R.anim.alpha);    }}